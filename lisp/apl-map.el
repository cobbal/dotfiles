;;  -*- lexical-binding: t -*-

(defun create-apl-keymap-from-din ()
 (save-excursion
  (goto-char (point-max))
  (insert
   "\n;;; begin generated code ;;;\n"
   "(define-prefix-command 'apl-map)\n"
   "(global-set-key (kbd \"M-a\") 'apl-map)\n")
  (dolist (line (with-temp-buffer
                 (insert-file-contents "apl.din")
                 (split-string (buffer-string) "\n" t)))
   (unless (or
            (string-prefix-p "MOD:" line)
            (string-prefix-p "+" line)
            (string= "" line))
    (setq line (replace-regexp-in-string ":.*$" "" line))
    (setq line (replace-regexp-in-string "^," "" line))
    (let* ((parts (split-string line "="))
           (code-point (string-to-int (car parts)))
           (win-char-code
            (split-string (mapconcat #'identity (cdr parts) "=") "+"))
           (has-shift (and (member "Shift" win-char-code) t))
           (has-ctrl (and (member "Ctrl" win-char-code) t))
           (key (replace-regexp-in-string
                 "[ \t]+$" "" (car (last win-char-code))))
           (key (if (string= key "\\") "\\\\" key))
           (ctrl-part (if has-ctrl "" ""))
           (shift-part (if has-shift "M-" ""))
           (kbd-string (format "M-a %s%s%s" ctrl-part shift-part key)))
     (insert
      (format "(global-set-key (kbd \"%s\")" kbd-string)
      (format " (lambda () (interactive) (insert-char ?%c)))" code-point)
      "\n"))))))

(provide 'apl-map)

;;; begin generated code ;;;
(define-prefix-command 'apl-map)
(global-set-key (kbd "M-a") 'apl-map)
(global-set-key (kbd "M-a `") (lambda () (interactive) (insert-char ?⋄)))
(global-set-key (kbd "M-a 1") (lambda () (interactive) (insert-char ?¨)))
(global-set-key (kbd "M-a 2") (lambda () (interactive) (insert-char ?¯)))
(global-set-key (kbd "M-a 3") (lambda () (interactive) (insert-char ?<)))
(global-set-key (kbd "M-a 4") (lambda () (interactive) (insert-char ?≤)))
(global-set-key (kbd "M-a 5") (lambda () (interactive) (insert-char ?=)))
(global-set-key (kbd "M-a 6") (lambda () (interactive) (insert-char ?≥)))
(global-set-key (kbd "M-a 7") (lambda () (interactive) (insert-char ?>)))
(global-set-key (kbd "M-a 8") (lambda () (interactive) (insert-char ?≠)))
(global-set-key (kbd "M-a 9") (lambda () (interactive) (insert-char ?∨)))
(global-set-key (kbd "M-a 0") (lambda () (interactive) (insert-char ?∧)))
(global-set-key (kbd "M-a -") (lambda () (interactive) (insert-char ?×)))
(global-set-key (kbd "M-a =") (lambda () (interactive) (insert-char ?÷)))
(global-set-key (kbd "M-a M-`") (lambda () (interactive) (insert-char ?⍪)))
(global-set-key (kbd "M-a M-1") (lambda () (interactive) (insert-char ?≡)))
(global-set-key (kbd "M-a M-2") (lambda () (interactive) (insert-char ?⍫)))
(global-set-key (kbd "M-a M-3") (lambda () (interactive) (insert-char ?⍒)))
(global-set-key (kbd "M-a M-4") (lambda () (interactive) (insert-char ?⍋)))
(global-set-key (kbd "M-a M-5") (lambda () (interactive) (insert-char ?⌽)))
(global-set-key (kbd "M-a M-6") (lambda () (interactive) (insert-char ?⍉)))
(global-set-key (kbd "M-a M-7") (lambda () (interactive) (insert-char ?⊖)))
(global-set-key (kbd "M-a M-8") (lambda () (interactive) (insert-char ?⍟)))
(global-set-key (kbd "M-a M-9") (lambda () (interactive) (insert-char ?⍱)))
(global-set-key (kbd "M-a M-0") (lambda () (interactive) (insert-char ?⍲)))
(global-set-key (kbd "M-a M--") (lambda () (interactive) (insert-char ?!)))
(global-set-key (kbd "M-a M-=") (lambda () (interactive) (insert-char ?⌹)))
(global-set-key (kbd "M-a q") (lambda () (interactive) (insert-char ??)))
(global-set-key (kbd "M-a w") (lambda () (interactive) (insert-char ?⍵)))
(global-set-key (kbd "M-a e") (lambda () (interactive) (insert-char ?∊)))
(global-set-key (kbd "M-a r") (lambda () (interactive) (insert-char ?⍴)))
(global-set-key (kbd "M-a t") (lambda () (interactive) (insert-char ?~)))
(global-set-key (kbd "M-a y") (lambda () (interactive) (insert-char ?↑)))
(global-set-key (kbd "M-a u") (lambda () (interactive) (insert-char ?↓)))
(global-set-key (kbd "M-a i") (lambda () (interactive) (insert-char ?⍳)))
(global-set-key (kbd "M-a o") (lambda () (interactive) (insert-char ?○)))
(global-set-key (kbd "M-a p") (lambda () (interactive) (insert-char ?*)))
(global-set-key (kbd "M-a [") (lambda () (interactive) (insert-char ?←)))
(global-set-key (kbd "M-a ]") (lambda () (interactive) (insert-char ?→)))
(global-set-key (kbd "M-a \\") (lambda () (interactive) (insert-char ?⊢)))
(global-set-key (kbd "M-a M-e") (lambda () (interactive) (insert-char ?⍷)))
(global-set-key (kbd "M-a M-t") (lambda () (interactive) (insert-char ?⍨)))
(global-set-key (kbd "M-a y") (lambda () (interactive) (insert-char ?↑)))
(global-set-key (kbd "M-a u") (lambda () (interactive) (insert-char ?↓)))
(global-set-key (kbd "M-a M-i") (lambda () (interactive) (insert-char ?⌶)))
(global-set-key (kbd "M-a M-p") (lambda () (interactive) (insert-char ?⍣)))
(global-set-key (kbd "M-a M-[") (lambda () (interactive) (insert-char ?⍞)))
(global-set-key (kbd "M-a M-]") (lambda () (interactive) (insert-char ?⍬)))
(global-set-key (kbd "M-a M-\\") (lambda () (interactive) (insert-char ?⊣)))
(global-set-key (kbd "M-a a") (lambda () (interactive) (insert-char ?⍺)))
(global-set-key (kbd "M-a s") (lambda () (interactive) (insert-char ?⌈)))
(global-set-key (kbd "M-a d") (lambda () (interactive) (insert-char ?⌊)))
(global-set-key (kbd "M-a f") (lambda () (interactive) (insert-char ?_)))
(global-set-key (kbd "M-a g") (lambda () (interactive) (insert-char ?∇)))
(global-set-key (kbd "M-a h") (lambda () (interactive) (insert-char ?∆)))
(global-set-key (kbd "M-a j") (lambda () (interactive) (insert-char ?∘)))
(global-set-key (kbd "M-a k") (lambda () (interactive) (insert-char ?')))
(global-set-key (kbd "M-a l") (lambda () (interactive) (insert-char ?⎕)))
(global-set-key (kbd "M-a ;") (lambda () (interactive) (insert-char ?⍎)))
(global-set-key (kbd "M-a '") (lambda () (interactive) (insert-char ?⍕)))
(global-set-key (kbd "M-a M-a") (lambda () (interactive) (insert-char ?⍺)))
(global-set-key (kbd "M-a M-s") (lambda () (interactive) (insert-char ?⌈)))
(global-set-key (kbd "M-a M-l") (lambda () (interactive) (insert-char ?⌷)))
(global-set-key (kbd "M-a M-;") (lambda () (interactive) (insert-char ?≡)))
(global-set-key (kbd "M-a M-'") (lambda () (interactive) (insert-char ?≢)))
(global-set-key (kbd "M-a z") (lambda () (interactive) (insert-char ?⊂)))
(global-set-key (kbd "M-a x") (lambda () (interactive) (insert-char ?⊃)))
(global-set-key (kbd "M-a c") (lambda () (interactive) (insert-char ?∩)))
(global-set-key (kbd "M-a v") (lambda () (interactive) (insert-char ?∪)))
(global-set-key (kbd "M-a b") (lambda () (interactive) (insert-char ?⊥)))
(global-set-key (kbd "M-a n") (lambda () (interactive) (insert-char ?⊤)))
(global-set-key (kbd "M-a m") (lambda () (interactive) (insert-char ?|)))
(global-set-key (kbd "M-a ,") (lambda () (interactive) (insert-char ?⍝)))
(global-set-key (kbd "M-a .") (lambda () (interactive) (insert-char ?⍀)))
(global-set-key (kbd "M-a /") (lambda () (interactive) (insert-char ?⌿)))
(global-set-key (kbd "M-a M-z") (lambda () (interactive) (insert-char ?⊂)))
(global-set-key (kbd "M-a M-x") (lambda () (interactive) (insert-char ?⊃)))
(global-set-key (kbd "M-a M-c") (lambda () (interactive) (insert-char ?∩)))
(global-set-key (kbd "M-a M-v") (lambda () (interactive) (insert-char ?∪)))
(global-set-key (kbd "M-a M-,") (lambda () (interactive) (insert-char ?⍷)))
(global-set-key (kbd "M-a M-.") (lambda () (interactive) (insert-char ?⍙)))
(global-set-key (kbd "M-a M-/") (lambda () (interactive) (insert-char ?⍠)))
