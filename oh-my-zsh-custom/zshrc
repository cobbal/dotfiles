# -*- mode: sh -*-

ZSH=$HOME/.config/ohmyzsh
ZSH_CUSTOM=$HOME/.config/dotfiles/oh-my-zsh-custom
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Example format: plugins=(rails git textmate ruby lighthouse)
# plugins=(macos nix colors bitrise)

zstyle ':omz:update' mode reminder

plugins=(
    # zsh-completions
    # zsh-autosuggestions
    # zsh-syntax-highlighting
    history-substring-search
    screen
    # systemd
    # web-search
    # extract
    # k
    # z
    # sudo
    # httpie
    # git
    # python
    # docker
    # lol
    # pip
    # pyenv
    # redis-cli
    # zsh-wakatime          # enable if you use wakatime with 'https://github.com/wbingli/zsh-wakatime'
)

source $ZSH/oh-my-zsh.sh

# Customize to your needs...

# source ~/.launchd.conf.sh export

set +o multios

test -f /usr/local/share/zsh/site-functions/_aws && source /usr/local/share/zsh/site-functions/_aws

function alias_if_present {
    if which $1 > /dev/null; then
        alias $1="$2"
    fi
}

alias o.='open .'
alias o,='open .' # common typo...
alias_if_present csi 'rlwrap csi'
alias_if_present guile 'rlwrap guile'
alias_if_present ccl64 'rlwrap ccl64'
alias_if_present ocaml 'rlwrap ocaml'
alias_if_present ccl 'rlwrap ccl'
alias_if_present sml 'rlwrap sml'
alias aq='ag -Q'
alias bfd='openssl bf -d -a <'
alias ctop='top -o cpu'
alias_if_present emacs 'emacs -nw'
alias_if_present ping 'ping -c 1000'
alias iup='prettyping 8.8.8.8'
alias_if_present clj 'rlwrap clj'
alias_if_present clojure 'rlwrap clojure'
alias ttty='tee /dev/tty'
alias igdb='fsf-gdbtui'
alias sl='ls'
alias kasse='killall ScreenSaverEngine'
alias android-studio='open -a ~/Applications/Android\ Studio.app'
alias skim='open -a ~/Applications/Skim.app'
function escape { local in=$(cat); printf "%s\n" "${(q)in}" }
alias pwcopy='pwd | escape | pbcopy'
alias nix-zsh='nix-shell "<nixpkgs>" --command "exec zsh; return"'
alias rp.='cd "$(grealpath .)"'
if [[ -e /usr/bin/man ]]; then alias man=/usr/bin/man; fi
alias instr-time="instruments -t 'Time Profiler'"
alias op8="cd ~/src/OmicronPersei8"
alias xc="open -a /Applications/Xcode-self-signed.app"
alias urldecode='python -c "import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])"'
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'
alias simctl='xcrun simctl'
alias pull='open https://github.com/instructure/canvas-ios/pulls'
alias xcode='open -a $(xcode-select -p)/../..'
alias ceamcs='cemacs'
alias svgpathpp='gsed -Ee '\''s/\W*([A-Za-z])\b/\n\1/g'\'
alias ooooops='EDITOR=true git commit -a --amend && git push -f'
alias ag='ag --path-to-ignore ~/.ignore --hidden'
alias intel='arch -x86_64'

unset alias_if_present

fpath=(~/.config/ezsh/completions $fpath)

setopt bsdecho

if [[ "$(uname)" == "Linux" ]]; then
    alias pbcopy='xsel --clipboard --input'
    alias pbpaste='xsel --clipboard --output'
fi

function lps {
    local tmp=$(ps -Af)
    printf "%s\n" "$tmp" | head -n 1
    printf "%s\n" "$tmp" | grep -i $@
}

function lwhich {
    which $1 | xargs ls -l
}

function bfe {
    if [ -e $1 ]; then
        echo "File exists, cowardly refusing to overwrite"
    else
        read -s "pass?Enter new password: "
        echo
        echo $pass | openssl bf -a > $1
        pass=''
    fi
}

if which pyenv > /dev/null; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init - 2>/dev/null)"
fi

if [[ "$TERM" != "dumb" ]]; then
    test -e ${HOME}/.iterm2_shell_integration.zsh && source ${HOME}/.iterm2_shell_integration.zsh \
    || echo $'iterm2 intergration not present. to install:\n  curl -L https://iterm2.com/misc/install_shell_integration.sh | bash'
fi

# OPAM configuration
. /Users/acobb/.opam/opam-init/complete.zsh > /dev/null 2> /dev/null || true
if which opam > /dev/null; then
    eval "$(opam config env)"
fi

if [[ "$TERM" == "dumb" ]]; then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    unfunction precmd
    unfunction preexec
    PS1='$ '
fi

export TAG_ALIAS_FILE="${HOME}/.config/tag_aliases"
export TAG_CMD_FMT_STRING="cemacs +{{.LineNumber}} \"{{.Filename}}\""
if (( $+commands[tag] )); then
  tag() { command tag "$@"; source ${TAG_ALIAS_FILE} 2>/dev/null }
  alias ag='tag --hidden --path-to-ignore ~/.ignore'
fi

eval $(thefuck --alias fix 2>/dev/null) 2>/dev/null || true
source "${HOME}/programs/git-subrepo/.rc" 2>/dev/null || true

if which rbenv > /dev/null; then eval "$(rbenv init -)" 2>/dev/null || true; fi

unset MANPATH
if which swiftenv > /dev/null; then eval "$(swiftenv init -)"; fi

function _log_exit_codes() {
    local returns=($? $pipestatus)
    local zero=(0)
    local non_zeroes=${returns:|zero}
    if (( ${#non_zeroes[@]} )); then
        (( $returns[1] )) && local status_message='✘ ' || local status_message='✔ '
        status_message+=${(j:|:)returns:1}
        echo "$fg[red]$status_message$reset_color"
    fi
}
autoload -U add-zsh-hook
add-zsh-hook precmd _log_exit_codes

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

source ~/.nix-profile/etc/profile.d/hm-session-vars.sh
if [ -n "${commands[fzf-share]}" ]; then
  source "$(fzf-share)/key-bindings.zsh"
  source "$(fzf-share)/completion.zsh"
fi

true
